#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import math
import torch
import torch.nn as nn
import torch.nn.functional as F

# OLD
# (None, 14, 1000, 114)
# (None, 1, 141, 341)

# NEW, generated by Yuxin
# seismic:  (None, 9, 1251, 101)
# velocity: (None, 1, 141, 401)

SEISMIC_CHANNEL = 14 
SEISMIC_CHANNEL_1 = 9
VELOCITY_CHANNEL = 1 

class Conv2DwithBN(nn.Module):
    def __init__(self, in_fea, out_fea, kernel_size=3, stride=1, padding=1):
        super(Conv2DwithBN,self).__init__()
        layers = [nn.Conv2d(in_channels=in_fea, out_channels=out_fea, kernel_size=kernel_size, stride=stride, padding=padding)]
        layers.append(nn.BatchNorm2d(num_features=out_fea))
        layers.append(nn.LeakyReLU(0.2, inplace=True))
        self.Conv2DwithBN = nn.Sequential(*layers)
    def forward(self, x):
        output = self.Conv2DwithBN(x)
        return output

class Conv2DwithBN_Tanh(nn.Module):
    def __init__(self, in_fea, out_fea, kernel_size=3, stride=1, padding=1):
        super(Conv2DwithBN_Tanh, self).__init__()
        layers = [nn.Conv2d(in_channels=in_fea, out_channels=out_fea, kernel_size=kernel_size, stride=stride, padding=padding)]
        layers.append(nn.BatchNorm2d(num_features=out_fea))
        layers.append(nn.Tanh())
        self.Conv2DwithBN = nn.Sequential(*layers)
    def forward(self, x):
        output = self.Conv2DwithBN(x)
        return output

class Deconv2DwithBN(nn.Module):
    def __init__(self, in_fea, out_fea, kernel_size=2, stride=2, padding=0, output_padding=0):
        super(Deconv2DwithBN, self).__init__()
        layers = [nn.ConvTranspose2d(in_channels=in_fea, out_channels=out_fea, kernel_size=kernel_size, stride=stride, padding=padding, output_padding=output_padding)]
        layers.append(nn.BatchNorm2d(num_features=out_fea))
        layers.append(nn.LeakyReLU(0.2, inplace=True))
        self.Deconv2DwithBN = nn.Sequential(*layers)
    def forward(self, x):
        output = self.Deconv2DwithBN(x)
        return output

class FCN4(nn.Module):
    def __init__(self, sample_ratio=4, dim0=16, dim1=32, dim2=64, dim3=128, dim4=256, dim5=512):
        super(FCN4, self).__init__()
        self.sample_ratio = sample_ratio
        self.convblock1 = Conv2DwithBN(SEISMIC_CHANNEL, dim1, kernel_size=(7, 1), stride=(2, 1), padding=(3, 0))
        self.convblock2_1 = Conv2DwithBN(dim1, dim2, stride=2)
        self.convblock2_2 = Conv2DwithBN(dim2, dim2)
        self.convblock3_1 = Conv2DwithBN(dim2, dim2, stride=2)
        self.convblock3_2 = Conv2DwithBN(dim2, dim2)
        self.convblock4_1 = Conv2DwithBN(dim2, dim3, stride=2)
        self.convblock4_2 = Conv2DwithBN(dim3, dim3)
        self.convblock5_1 = Conv2DwithBN(dim3, dim3, stride=2)
        self.convblock5_2 = Conv2DwithBN(dim3, dim3)
        self.convblock6_1 = Conv2DwithBN(dim3, dim4, stride=2)
        self.convblock6_2 = Conv2DwithBN(dim4, dim4)
        self.convblock7_1 = Conv2DwithBN(dim4, dim4, stride=2)
        self.convblock7_2 = Conv2DwithBN(dim4, dim4)
        self.convblock8 = Conv2DwithBN(dim4, dim5, kernel_size=(8 // sample_ratio, 2), padding=0)
        
        self.deconv1_1 = Deconv2DwithBN(dim5, dim5, kernel_size=(5, 11))
        self.deconv1_2 = Conv2DwithBN(dim5, dim5)
        self.deconv2_1 = Deconv2DwithBN(dim5, dim4, kernel_size=4, stride=2, padding=1)
        self.deconv2_2 = Conv2DwithBN(dim4, dim4)
        self.deconv3_1 = Deconv2DwithBN(dim4, dim3, kernel_size=4, stride=2, padding=1)
        self.deconv3_2 = Conv2DwithBN(dim3, dim3)
        self.deconv4_1 = Deconv2DwithBN(dim3, dim2, kernel_size=4, stride=2, padding=1)
        self.deconv4_2 = Conv2DwithBN(dim2, dim2)
        self.deconv5_1 = Deconv2DwithBN(dim2, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_2 = Conv2DwithBN(dim1, dim1)
        self.deconv6_1 = Deconv2DwithBN(dim1, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_2 = Conv2DwithBN(dim0, dim0)
        self.deconv7 = Conv2DwithBN_Tanh(dim0, VELOCITY_CHANNEL)
    def forward(self,x):
        # Encoder Part
        x = self.convblock1(x) # (None, 32, 125, 114)
        x = self.convblock2_1(x) # (None, 64, 63, 57)
        x = self.convblock2_2(x) # (None, 64, 63, 57)
        x = self.convblock3_1(x) # (None, 64, 32, 29)
        x = self.convblock3_2(x) # (None, 64, 32, 29)
        x = self.convblock4_1(x) # (None, 128, 16, 15)
        x = self.convblock4_2(x) # (None, 128, 16, 15)
        x = self.convblock5_1(x) # (None, 128, 8, 8)
        x = self.convblock5_2(x) # (None, 128, 8, 8)
        x = self.convblock6_1(x) # (None, 256, 4, 4)
        x = self.convblock6_2(x) # (None, 256, 4, 4)
        x = self.convblock7_1(x) # (None, 256, 2, 2)
        x = self.convblock7_2(x) # (None, 256, 2, 2)
        x = self.convblock8(x) # (None, 512, 1, 1)
        
        # Decoder Part 
        x = self.deconv1_1(x) # (None, 512, 5, 11)
        x = self.deconv1_2(x) # (None, 512, 5, 11)
        x = self.deconv2_1(x) # (None, 256, 10, 22)
        x = self.deconv2_2(x) # (None, 256, 10, 22)
        x = self.deconv3_1(x) # (None, 128, 20, 44)
        x = self.deconv3_2(x) # (None, 128, 20, 44)
        x = self.deconv4_1(x) # (None, 64, 40, 88)
        x = self.deconv4_2(x) # (None, 64, 40, 88)
        x = self.deconv5_1(x) # (None, 32, 80, 176)
        x = self.deconv5_2(x) # (None, 32, 80, 176)
        x = self.deconv6_1(x) # (None, 16, 160, 352)
        x = self.deconv6_2(x) # (None, 16, 160, 352)
        x = F.pad(x, [-5, -6, -9, -10], mode="constant", value=0) # (None, 16, 141, 341)
        x = self.deconv7(x) # (None, 1, 141, 341)
        return x


class FCN4_V2S(nn.Module):
    def __init__(self, sample_ratio=4, dim0=16, dim1=32, dim2=64, dim3=128, dim4=256, dim5=512, dim6=1024):
        super(FCN4_V2S, self).__init__()
        self.sample_ratio = sample_ratio
        self.convblock1 = Conv2DwithBN(VELOCITY_CHANNEL, dim0, stride=2)
        self.convblock2_1 = Conv2DwithBN(dim0, dim1, stride=2)
        self.convblock2_2 = Conv2DwithBN(dim1, dim1)
        self.convblock3_1 = Conv2DwithBN(dim1, dim2, stride=2)
        self.convblock3_2 = Conv2DwithBN(dim2, dim2)
        self.convblock4_1 = Conv2DwithBN(dim2, dim3, stride=2)
        self.convblock4_2 = Conv2DwithBN(dim3, dim3)
        self.convblock5_1 = Conv2DwithBN(dim3, dim4, stride=2)
        self.convblock5_2 = Conv2DwithBN(dim4, dim4)
        self.convblock6_1 = Conv2DwithBN(dim4, dim5, stride=2)
        self.convblock6_2 = Conv2DwithBN(dim5, dim5)
        self.convblock7 = Conv2DwithBN(dim5, dim6, kernel_size=(3, 6), padding=0)

        # e.g.: sample_ratio=4, kernel size 8 --> layer before cropping 256
        self.deconv1_1 = Deconv2DwithBN(dim6, dim5, kernel_size=(32 // sample_ratio, 4)) 
        self.deconv1_2 = Conv2DwithBN(dim5, dim5)
        self.deconv2_1 = Deconv2DwithBN(dim5, dim4, kernel_size=4, stride=2, padding=1)
        self.deconv2_2 = Conv2DwithBN(dim4, dim4)
        self.deconv3_1 = Deconv2DwithBN(dim4, dim3, kernel_size=4, stride=2, padding=1)
        self.deconv3_2 = Conv2DwithBN(dim3, dim3)
        self.deconv4_1 = Deconv2DwithBN(dim3, dim2, kernel_size=4, stride=2, padding=1)
        self.deconv4_2 = Conv2DwithBN(dim2, dim2)
        self.deconv5_1 = Deconv2DwithBN(dim2, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_2 = Conv2DwithBN(dim1, dim1)
        self.deconv6_1 = Deconv2DwithBN(dim1, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_2 = Conv2DwithBN(dim0, dim0)
        self.deconv7 = Conv2DwithBN_Tanh(dim0, SEISMIC_CHANNEL)
    def forward(self,x):
        # Encoder Part
        x = self.convblock1(x) # (None, 16, 71, 171)
        x = self.convblock2_1(x) # (None, 32, 36, 86)
        x = self.convblock2_2(x) # (None, 32, 36, 86)
        x = self.convblock3_1(x) # (None, 64, 18, 43)
        x = self.convblock3_2(x) # (None, 64, 18, 43)
        x = self.convblock4_1(x) # (None, 128, 9, 22)
        x = self.convblock4_2(x) # (None, 128, 9, 22)
        x = self.convblock5_1(x) # (None, 256, 5, 11)
        x = self.convblock5_2(x) # (None, 256, 5, 11)
        x = self.convblock6_1(x) # (None, 512, 3, 6)
        x = self.convblock6_2(x) # (None, 512, 3, 6)
        x = self.convblock7(x) # (None, 1024, 1, 1)

        # Decoder Part 
        x = self.deconv1_1(x) # (None, 512, 8, 4)
        x = self.deconv1_2(x) # (None, 512, 8, 4)
        x = self.deconv2_1(x) # (None, 256, 16, 8)
        x = self.deconv2_2(x) # (None, 256, 16, 8)
        x = self.deconv3_1(x) # (None, 128, 32, 16)
        x = self.deconv3_2(x) # (None, 128, 32, 16)
        x = self.deconv4_1(x) # (None, 64, 64, 32)
        x = self.deconv4_2(x) # (None, 64, 64, 32)
        x = self.deconv5_1(x) # (None, 32, 128, 64)
        x = self.deconv5_2(x) # (None, 32, 128, 64)
        x = self.deconv6_1(x) # (None, 16, 256, 128)
        x = self.deconv6_2(x) # (None, 16, 256, 128)
        pad_h  = -12 // self.sample_ratio # e.g. sample_ratio=4, target=250, pad=-3
        x = F.pad(x, [-7, -7, pad_h, pad_h], mode="constant", value=0) # (None, 16, 250, 114)
        x = self.deconv7(x) # (None, 14, 250, 114)
        return x


class FCN4_1(nn.Module):
    def __init__(self, sample_ratio=1, dim0=16, dim1=32, dim2=64, dim3=128, dim4=256, dim5=512):
        super(FCN4_1, self).__init__()
        self.sample_ratio = sample_ratio
        self.convblock1 = Conv2DwithBN(SEISMIC_CHANNEL_1, dim1, kernel_size=(7, 1), stride=(2, 1), padding=(3, 0))
        self.convblock2_1 = Conv2DwithBN(dim1, dim2, stride=2)
        self.convblock2_2 = Conv2DwithBN(dim2, dim2)
        self.convblock3_1 = Conv2DwithBN(dim2, dim2, stride=2)
        self.convblock3_2 = Conv2DwithBN(dim2, dim2)
        self.convblock4_1 = Conv2DwithBN(dim2, dim3, stride=2)
        self.convblock4_2 = Conv2DwithBN(dim3, dim3)
        self.convblock5_1 = Conv2DwithBN(dim3, dim3, stride=2)
        self.convblock5_2 = Conv2DwithBN(dim3, dim3)
        self.convblock6_1 = Conv2DwithBN(dim3, dim4, stride=2)
        self.convblock6_2 = Conv2DwithBN(dim4, dim4)
        self.convblock7_1 = Conv2DwithBN(dim4, dim4, stride=2)
        self.convblock7_2 = Conv2DwithBN(dim4, dim4)
        self.convblock8 = Conv2DwithBN(dim4, dim5, kernel_size=(math.ceil(10 / sample_ratio), 2), padding=0)
        
        self.deconv1_1 = Deconv2DwithBN(dim5, dim5, kernel_size=(5, 13))
        self.deconv1_2 = Conv2DwithBN(dim5, dim5)
        self.deconv2_1 = Deconv2DwithBN(dim5, dim4, kernel_size=4, stride=2, padding=1)
        self.deconv2_2 = Conv2DwithBN(dim4, dim4)
        self.deconv3_1 = Deconv2DwithBN(dim4, dim3, kernel_size=4, stride=2, padding=1)
        self.deconv3_2 = Conv2DwithBN(dim3, dim3)
        self.deconv4_1 = Deconv2DwithBN(dim3, dim2, kernel_size=4, stride=2, padding=1)
        self.deconv4_2 = Conv2DwithBN(dim2, dim2)
        self.deconv5_1 = Deconv2DwithBN(dim2, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_2 = Conv2DwithBN(dim1, dim1)
        self.deconv6_1 = Deconv2DwithBN(dim1, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_2 = Conv2DwithBN(dim0, dim0)
        self.deconv7 = Conv2DwithBN_Tanh(dim0, VELOCITY_CHANNEL)
    def forward(self,x):
        # Encoder Part 1251
        x = self.convblock1(x) # (None, 32, 626, 101)
        #print(x.shape)
        x = self.convblock2_1(x) # (None, 64, 313, 51) 
        #print(x.shape)
        x = self.convblock2_2(x) # (None, 64, 313, 51)
        #print(x.shape)
        x = self.convblock3_1(x) # (None, 64, 157, 26) 
        #print(x.shape)
        x = self.convblock3_2(x) # (None, 64, 157, 26)
        #print(x.shape)
        x = self.convblock4_1(x) # (None, 128, 79, 13) 
        #print(x.shape)
        x = self.convblock4_2(x) # (None, 128, 79, 13)
        #print(x.shape)
        x = self.convblock5_1(x) # (None, 128, 40, 7)
        #print(x.shape) 
        x = self.convblock5_2(x) # (None, 128, 40, 7)
        #print(x.shape)
        x = self.convblock6_1(x) # (None, 256, 20, 4)
        #print(x.shape) 
        x = self.convblock6_2(x) # (None, 256, 20, 4)
        #print(x.shape)
        x = self.convblock7_1(x) # (None, 256, 10, 2)
        #print(x.shape)
        x = self.convblock7_2(x) # (None, 256, 10, 2)
        #print(x.shape)
        x = self.convblock8(x) # (None, 512, 1, 1)
        #print(x.shape)
        
        # Decoder Part 
        x = self.deconv1_1(x) # (None, 512, 5, 13)
        x = self.deconv1_2(x) # (None, 512, 5, 13)
        x = self.deconv2_1(x) # (None, 256, 10, 26)
        x = self.deconv2_2(x) # (None, 256, 10, 26)
        x = self.deconv3_1(x) # (None, 128, 20, 52)
        x = self.deconv3_2(x) # (None, 128, 20, 52)
        x = self.deconv4_1(x) # (None, 64, 40, 104)
        x = self.deconv4_2(x) # (None, 64, 40, 104)
        x = self.deconv5_1(x) # (None, 32, 80, 208)
        x = self.deconv5_2(x) # (None, 32, 80, 208)
        x = self.deconv6_1(x) # (None, 16, 160, 416)
        x = self.deconv6_2(x) # (None, 16, 160, 416)
        x = F.pad(x, [-7, -8, -9, -10], mode="constant", value=0) # (None, 16, 141, 401)
        x = self.deconv7(x) # (None, 1, 141, 401)
        return x


class FCN4_V2S_1(nn.Module):
    def __init__(self, sample_ratio=4, dim0=16, dim1=32, dim2=64, dim3=128, dim4=256, dim5=512, dim6=1024):
        super(FCN4_V2S_1, self).__init__()
        self.sample_ratio = sample_ratio
        self.convblock1 = Conv2DwithBN(VELOCITY_CHANNEL, dim0, stride=2)
        self.convblock2_1 = Conv2DwithBN(dim0, dim1, stride=2)
        self.convblock2_2 = Conv2DwithBN(dim1, dim1)
        self.convblock3_1 = Conv2DwithBN(dim1, dim2, stride=2)
        self.convblock3_2 = Conv2DwithBN(dim2, dim2)
        self.convblock4_1 = Conv2DwithBN(dim2, dim3, stride=2)
        self.convblock4_2 = Conv2DwithBN(dim3, dim3)
        self.convblock5_1 = Conv2DwithBN(dim3, dim4, stride=2)
        self.convblock5_2 = Conv2DwithBN(dim4, dim4)
        self.convblock6_1 = Conv2DwithBN(dim4, dim5, stride=2)
        self.convblock6_2 = Conv2DwithBN(dim5, dim5)
        self.convblock7 = Conv2DwithBN(dim5, dim6, kernel_size=(3, 7), padding=0)

        self.deconv1_1 = Deconv2DwithBN(dim6, dim5, kernel_size=(40 // sample_ratio, 4)) 
        self.deconv1_2 = Conv2DwithBN(dim5, dim5)
        self.deconv2_1 = Deconv2DwithBN(dim5, dim4, kernel_size=4, stride=2, padding=1)
        self.deconv2_2 = Conv2DwithBN(dim4, dim4)
        self.deconv3_1 = Deconv2DwithBN(dim4, dim3, kernel_size=4, stride=2, padding=1)
        self.deconv3_2 = Conv2DwithBN(dim3, dim3)
        self.deconv4_1 = Deconv2DwithBN(dim3, dim2, kernel_size=4, stride=2, padding=1)
        self.deconv4_2 = Conv2DwithBN(dim2, dim2)
        self.deconv5_1 = Deconv2DwithBN(dim2, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_2 = Conv2DwithBN(dim1, dim1)
        self.deconv6_1 = Deconv2DwithBN(dim1, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_2 = Conv2DwithBN(dim0, dim0)
        self.deconv7 = Conv2DwithBN_Tanh(dim0, SEISMIC_CHANNEL_1)
    def forward(self,x):
        # Encoder Part
        x = self.convblock1(x) # (None, 16, 71, 201)
        x = self.convblock2_1(x) # (None, 32, 36, 101)
        x = self.convblock2_2(x) # (None, 32, 36, 101)
        x = self.convblock3_1(x) # (None, 64, 18, 51)
        x = self.convblock3_2(x) # (None, 64, 18, 51)
        x = self.convblock4_1(x) # (None, 128, 9, 26)
        x = self.convblock4_2(x) # (None, 128, 9, 26)
        x = self.convblock5_1(x) # (None, 256, 5, 13)
        x = self.convblock5_2(x) # (None, 256, 5, 13)
        x = self.convblock6_1(x) # (None, 512, 3, 7)
        x = self.convblock6_2(x) # (None, 512, 3, 7)
        x = self.convblock7(x) # (None, 1024, 1, 1)

        # Decoder Part 
        x = self.deconv1_1(x) # (None, 512, 40, 4)
        x = self.deconv1_2(x) # (None, 512, 40, 4)
        x = self.deconv2_1(x) # (None, 256, 80, 8)
        x = self.deconv2_2(x) # (None, 256, 80, 8)
        x = self.deconv3_1(x) # (None, 128, 160, 16)
        x = self.deconv3_2(x) # (None, 128, 160, 16)
        x = self.deconv4_1(x) # (None, 64, 320, 32)
        x = self.deconv4_2(x) # (None, 64, 320, 32)
        x = self.deconv5_1(x) # (None, 32, 640, 64)
        x = self.deconv5_2(x) # (None, 32, 640, 64)
        x = self.deconv6_1(x) # (None, 16, 1280, 128)
        x = self.deconv6_2(x) # (None, 16, 1280, 128)
        if self.sample_ratio == 1:
            x = F.pad(x, [-14, -13, -15, -14], mode="constant", value=0) # (None, 16, 1251, 101)
        elif self.sample_ratio == 4:
            x = F.pad(x, [-14, -13, -4, -3], mode="constant", value=0) # (None, 16, 313, 101)
        x = self.deconv7(x) # (None, 14, 1251, 101)
        return x

class FCN4_V2S_2(nn.Module):
    def __init__(self, sample_ratio=4, dim0=16, dim1=32, dim2=64, dim3=128, dim4=256, dim5=512, dim6=1024):
        super(FCN4_V2S_2, self).__init__()
        self.sample_ratio = sample_ratio
        self.convblock1 = Conv2DwithBN(VELOCITY_CHANNEL, dim0, stride=2)
        self.convblock2_1 = Conv2DwithBN(dim0, dim1, stride=2)
        self.convblock2_2 = Conv2DwithBN(dim1, dim1)
        self.convblock3_1 = Conv2DwithBN(dim1, dim2, stride=2)
        self.convblock3_2 = Conv2DwithBN(dim2, dim2)
        self.convblock4_1 = Conv2DwithBN(dim2, dim3, stride=2)
        self.convblock4_2 = Conv2DwithBN(dim3, dim3)
        self.convblock5_1 = Conv2DwithBN(dim3, dim4, stride=2)
        self.convblock5_2 = Conv2DwithBN(dim4, dim4)
        self.convblock6_1 = Conv2DwithBN(dim4, dim5, stride=2)
        self.convblock6_2 = Conv2DwithBN(dim5, dim5)
        self.convblock7 = Conv2DwithBN(dim5, dim6, kernel_size=(3, 7), padding=0)

        self.deconv1_1 = Deconv2DwithBN(dim6, dim5, kernel_size=(10, 1)) 
        self.deconv1_2 = Conv2DwithBN(dim5, dim5)
        self.deconv2_1 = Deconv2DwithBN(dim5, dim4, kernel_size=4, stride=2, padding=1)
        self.deconv2_2 = Conv2DwithBN(dim4, dim4)
        self.deconv3_1 = Deconv2DwithBN(dim4, dim3, kernel_size=4, stride=2, padding=1)
        self.deconv3_2 = Conv2DwithBN(dim3, dim3)
        self.deconv4_1 = Deconv2DwithBN(dim3, dim2, kernel_size=4, stride=2, padding=1)
        self.deconv4_2 = Conv2DwithBN(dim2, dim2)
        self.deconv5_1 = Deconv2DwithBN(dim2, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_2 = Conv2DwithBN(dim1, dim1)
        self.deconv5_3 = Deconv2DwithBN(dim1, dim1, kernel_size=4, stride=2, padding=1)
        self.deconv5_4 = Conv2DwithBN(dim1, dim1)

        self.deconv6_1 = Deconv2DwithBN(dim1, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_2 = Conv2DwithBN(dim0, dim0)
        self.deconv6_3 = Deconv2DwithBN(dim0, dim0, kernel_size=4, stride=2, padding=1)
        self.deconv6_4 = Conv2DwithBN(dim0, dim0)

        self.deconv7 = Conv2DwithBN_Tanh(dim0, SEISMIC_CHANNEL_1)
    def forward(self,x):
        # Encoder Part
        x = self.convblock1(x) # (None, 16, 71, 201)
        x = self.convblock2_1(x) # (None, 32, 36, 101)
        x = self.convblock2_2(x) # (None, 32, 36, 101)
        x = self.convblock3_1(x) # (None, 64, 18, 51)
        x = self.convblock3_2(x) # (None, 64, 18, 51)
        x = self.convblock4_1(x) # (None, 128, 9, 26)
        x = self.convblock4_2(x) # (None, 128, 9, 26)
        x = self.convblock5_1(x) # (None, 256, 5, 13)
        x = self.convblock5_2(x) # (None, 256, 5, 13)
        x = self.convblock6_1(x) # (None, 512, 3, 7)
        x = self.convblock6_2(x) # (None, 512, 3, 7)
        x = self.convblock7(x) # (None, 1024, 1, 1)

        # Decoder Part 
        x = self.deconv1_1(x) # (None, 512, 40, 4)
        x = self.deconv1_2(x) # (None, 512, 40, 4)
        x = self.deconv2_1(x) # (None, 256, 80, 8)
        x = self.deconv2_2(x) # (None, 256, 80, 8)
        x = self.deconv3_1(x) # (None, 128, 160, 16)
        x = self.deconv3_2(x) # (None, 128, 160, 16)
        x = self.deconv4_1(x) # (None, 64, 320, 32)
        x = self.deconv4_2(x) # (None, 64, 320, 32)
        x = self.deconv5_1(x) # (None, 32, 640, 64)
        x = self.deconv5_2(x) # (None, 32, 640, 64)
        x = self.deconv5_3(x) # (None, 32, 640, 64)
        x = self.deconv5_4(x) # (None, 32, 640, 64)
        x = self.deconv6_1(x) # (None, 16, 1280, 128)
        x = self.deconv6_2(x) # (None, 16, 1280, 128)
        x = self.deconv6_3(x) # (None, 16, 1280, 128)
        x = self.deconv6_4(x) # (None, 16, 1280, 128)

        x = F.pad(x, [-14, -13, -15, -14], mode="constant", value=0) # (None, 16, 1251, 101)
        x = self.deconv7(x) # (None, 14, 1251, 101)
        return x

model_dict = {
    'FCN4': FCN4,
    'FCN4_V2S': FCN4_V2S,
    'FCN4_1': FCN4_1,
    'FCN4_V2S_1': FCN4_V2S_1,
    'FCN4_V2S_2': FCN4_V2S_2
}


if __name__ == '__main__':
    # model = FCN4()
    # input = torch.randn(2, 14, 250, 114)
    # output = model(input)
    # print(output.shape)
    device = torch.device('cpu')
    input = torch.randn(10, 9, 1251, 101)
    # model = FCN4_1(sample_ratio=1)
    #input = torch.randn(2, 1, 141, 401)
    model = FCN4_1(sample_ratio=1)
    output = model(input)
    total_params = sum(p.numel() for p in model.parameters())
    print(total_params)
    print(output.shape)
